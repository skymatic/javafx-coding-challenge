name: Java CI

on: 
 [push]

env:
  KIT_NAME: javafx-helloworld-kit
  PCK_NAME: javafx-helloworld-package
 
jobs:
  build:
    name: Creates the executable Javafx test apps for different systems
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    outputs:
      artifact-version: ${{ steps.setversion.outputs.version }}
    env:
      BUILD_VERSION: SNAPSHOT
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with: 
        java-version: 14
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Ensure to use tagged version
      run: mvn versions:set --file main/pom.xml -DnewVersion=${GITHUB_REF##*/} # use shell parameter expansion to strip of 'refs/tags'
      if: startsWith(github.ref, 'refs/tags/')
    - name: Export the pom project version to the job environment and save it as an ouput of this job
      id: setversion
      run: |
        v=$(mvn help:evaluate "-Dexpression=project.version" --file main/pom.xml -q -DforceStdout)
        echo "::set-env name=BUILD_VERSION::${v}"
        echo "::set-output name=version::${v}"
    - name: Build buildkit with Maven
      run: mvn -B install --file pom.xml -Pbuildkit
    - name: Uploads the buildkit for possible further use
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.KIT_NAME}-${{matrix.os}}-${{ env.BUILD_VERSION }}
        path: target/javafx-testkit-*.zip
    - name: Build package with Maven
      run: mvn -B package --file pom.xml -Ppackage- Dbuild.jlink.alreadyExists=true
    - name: Uploads the package for possible further use
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PCK_NAME}-${{matrix.os}}-${{ env.BUILD_VERSION }}
        path: target/javafx-helloworld

  release:
    name: Draft a Release on GitHub Releases
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
      - name: Display structure of dowloaded files. This stepp will be removed with the next release.
        run: ls -R #TODO: remove this step and fix the ones below
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            :construction: Work in Progress
          draft: true
          prerelease: false
      - name: Upload linux kit to GitHub Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $${{ KIT_NAME }}-linux.zip #TODO
          asset_name: ${{ KIT_NAME}-linux.zip
          asset_content_type: application/zip
      - name: Upload mac kit to GitHub Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: buildkit-mac.zip #TODO
          asset_name: ${{ KIT_NAME }}-mac.zip
          asset_content_type: application/zip
      - name: Upload windows kit to GitHub Releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: buildkit-win.zip  #TODO
          asset_name: ${{ KIT_NAME }}-win.zip
          asset_content_type: application/zip
